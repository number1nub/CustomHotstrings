#NoEnv
#SingleInstance, Force
SetWorkingDir, %A_ScriptDir%
SetTitleMatchMode, 3
global regPath:="Software\WSNHapps\CustomHotstrings", hkKeys, hkEnabled
CheckAdmin()
GetHKConfig()
TrayMenu()
Hotkey, %hkKeys%, HSEditor, % hkEnabled ? "On" : "Off"
#Hotstring, * C1 R B ?
return
CheckAdmin() {
	if (!A_IsAdmin) {
		if (%true% = "admin") {
			MsgBox, 262196,, Failed to get admin credentials.`n`nTry again?
			IfMsgBox, No
				ExitApp
		}
		Run, *RunAs "%A_ScriptFullPath%" admin
		ExitApp
	}
	return 1
}
Exit() {
	ExitApp
}
ExpandEnv(str) {
	VarSetCapacity(dest, 2000)
	DllCall("ExpandEnvironmentStrings", "str", str, "str", dest, int, 1999, "Cdecl int")
	Return dest
}
Export() {
	RegRead, buDir, HKCU, %regPath%, BUDir
	FileSelectFile, oPath, 16, % (buDir!="" ? RegExReplace(buDir,"\\$") : "C:\Users\rameen25365\Desktop") "\" TimeStamp() "_hsTxt.ahk", Where should the output file be saved?, Hostring Backup (*.ahk, *.bak)
	if (ErrorLevel || oPath="")
		return
	try FileCopy, A_ScriptFullPath, oPath, 1
		catch e
			return m("An error occurred while backing up your hostrings.`n", "", e.message, e.extra, "ico:!")
	SplitPath, oPath,, oDir
	RegWrite, REG_SZ, HKCU, %regPath%, BUDir, %oDir%
	m("Sucessfully backed up hotstrings to", oPath,"ico:i")
}
GetEditorPath() {
	RegRead, ePath, HKCU, %regPath%, EditorPath
	if (ErrorLevel || !ePath || !FileExist(ePath))
		ePath := FileExist(ep:="Custom Hotstrings.exe") ? ep : FileExist(ep:="Custom Hotstrings.ahk") ? ep : ""
	return (FileExist(ePath) ? ePath : "")
}
GetHKConfig(get:="") {
	try {
		RegRead, hkEnabled, HKCU, %regPath%, hkEnabled
		RegRead, hkKeys, HKCU, %regPath%, hkKeys
	} catch e {
		RegWrite, REG_DWORD, HKCU, %regPath%, hkEnabled, % (hkEnabled:=1)
		RegWrite, REG_SZ, HKCU, %regPath%, hkKeys, % (hkKeys:="^!MButton")
	}
}
HKChange() {
	Gui, +AlwaysOnTop +OwnDialogs
	InputBox, newHK, Hotkey Customization, Enter the hotkey to open the HS editor.`n`nUse ^`, !`, + and # for Ctrl`, Alt`, Shift and Win`, respectively,,,,,,,, %hkKeys%
	if (ErrorLevel || newHK="" || newHK=hkKeys)
		return
	RegWrite, REG_SZ, %regPath%, hkKeys, %newHK%
	Reload()
}
HKToggle() {
	Hotkey, %hkKeys%, HSEditor, % (hkEnabled:=!hkEnabled) ? "On":"Off"
	Menu, Tray, ToggleCheck, Disable Hotkey
	RegWrite, REG_DWORD, HKCU,Software\WSNHapps\CustomHotstrings, hkEnabled, % hkEnabled ? 1 : 0
}
HKToString(key) {
	for a, b in [{Shift:"+"}, {Ctrl:"^"}, {Alt:"!"}]
		for c, d in b
			key := RegExReplace(key, "\" d, c "+")
	return LTrim(key, "~$*")
}
HSEditor() {
	try Run, % GetEditorPath()
		catch
			MsgBox 4144,, % "Couldn't find Custom Hotstrings editor...`n`n" GetEditorPath()
}
PasteVal(sendTxt, win:="") {
	cbb:=Clipboard, Clipboard:=""
	Clipboard := ExpandEnv(RegExReplace(sendTxt, "i)\$(?:CLIP|SEL(?:ECTION)?)", cbb))
	if (win)
		WinActivate, %win%
	Send, % "{Blind}" (WinActive("ahk_class ConsoleWindowClass") ? "!{Space}ep" : "^v")
	Sleep 250
	Clipboard := cbb
}
Reload() {
	Reload
	Pause
}
TimeStamp(format:="yyyy-MM-dd", time:="") {
	FormatTime, v, % time ? time : A_Now, %format%
	return v
}
TrayMenu() {
	Menu, DefaultAHK, Standard
	Menu, Tray, NoStandard
	Menu, Tray, Add, % "Launch Hotstring Editor" (hkKeys ? "`t(" HKToString(hkKeys) ")" : ""), HSEditor
	Menu, Tray, Default, % "Launch Hotstring Editor" (hkKeys ? "`t(" HKToString(hkKeys) ")" : "")
	Menu, Tray, Add, Disable Hotkey, HKToggle
	Menu, Tray, % (hkEnabled ? "Uncheck" : "Check"), Disable Hotkey
	Menu, Tray, Add, Customize the hotkey, hkChange
	Menu, Tray, Add
	Menu, Tray, Add, Backup/Export Hotstrings, Export
	Menu, Tray, Add
	Menu, Tray, Add, Check for Update, Update
	if (!A_IsCompiled) {
		Menu, Tray, Add
		Menu, Tray, Add, Default AHK Menu, :DefaultAHK
	}
	Menu, Tray, Add
	Menu, Tray, Add, Reload
	Menu, Tray, Add, Exit
	Menu, Tray, Tip, % "Custom Hotstrings " (A_IsAdmin ? " (Admin)":"") " is Running..."
	if (!FileExist(ico:=A_ScriptDir "\hotstrings.ico")) {
		URLDownloadToFile, http://files.wsnhapps.com/hotstrings/hotstrings.ico, %ico%
		if (ErrorLevel || !FileExist(ico))
			FileDelete, %ico%
	}
	Menu, Tray, Icon, % FileExist(ico) ? ico : ""
	TrayTip, Custom Hotstrings, Reloaded!, 800, 1
}
Update() {
	if (ePath:=GetEditorPath())
		Run, "%ePath%" /update
	else
		MsgBox 4144,, % "Unable to find updater file.`n`n" ePath "`n`nTry visiting http://wsnhapps.com to re-download the application."
}

;______________________________________ BEGIN USER HOTSTRINGS _______________________________________
;****************************************************************************************************

:?0C:btw::by the way
::lol::laugh out loud